// üß† Conceito R√°pido
// O padr√£o Singleton garante que s√≥ exista uma √∫nica inst√¢ncia de uma classe durante toda a execu√ß√£o do programa.
// Em vez de criar v√°rios objetos, o Singleton reutiliza o mesmo objeto sempre que for chamado.

// Exerc√≠cios ‚Äî Padr√£o Singleton (n√≠vel intermedi√°rio ‚Üí avan√ßando)
// Exerc√≠cio 1 ‚Äì Configura√ß√£o do Sistema
// Crie uma classe Configuracoes que contenha:
// idioma
// tema
// modoNoturno
// A ideia √© que s√≥ exista uma configura√ß√£o global em toda a aplica√ß√£o.
// Implemente o padr√£o Singleton:
// Se o objeto j√° existir, ele deve retornar a mesma inst√¢ncia.
// Caso contr√°rio, cria uma nova.
// Teste criando duas vari√°veis diferentes:
// const c1 = new Configuracoes()
// const c2 = new Configuracoes()
// Elas devem apontar para o mesmo objeto (c1 === c2 deve ser true).

class Configuracoes{
    constructor(){
        if(Configuracoes.instancia){
            return Configuracoes.instancia
        }
        this.idioma="pt-br"
        this.tema="claro"
        this.modoNoturno=false

        Configuracoes.instancia = this
    }
}

const c1 = new Configuracoes()
const c2 = new Configuracoes()
c2.tema="escuro"
c2.modoNoturno=true

console.log(c1)
console.log(c2)
console.log(c1===c2)