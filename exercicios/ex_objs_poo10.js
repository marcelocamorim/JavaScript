// ğŸš€ ExercÃ­cios com Objetos â€” NÃ­vel IntermediÃ¡rio/AvanÃ§ado
// ğŸ”¹ 1. Sistema de biblioteca com busca por autor

// Crie um objeto biblioteca que contenha um array livros, onde cada livro Ã© um objeto { titulo, autor, ano }.
// Implemente mÃ©todos:
// adicionarLivro(titulo, autor, ano)
// buscarPorAutor(autor) â†’ retorna todos os livros desse autor.
// listarLivrosOrdenados() â†’ mostra todos os livros ordenados por ano.
// ğŸ§  Desafio extra: use sort() para ordenar os livros e filter() na busca por autor.








// ğŸ”¹ 2. Sistema de notas com ranking

// Crie um objeto turma com um array alunos, cada aluno sendo { nome, notas: [] }.
// Adicione mÃ©todos:

// calcularMedia(nome)

// ranking() â†’ retorna uma lista de alunos ordenada da maior para a menor mÃ©dia.

// ğŸ§  Dica: use map() e sort() juntos para gerar o ranking.

// ğŸ”¹ 3. Simulador de conta bancÃ¡ria com histÃ³rico

// Crie um objeto conta com:

// saldo: 0,
// historico: []


// E mÃ©todos:

// depositar(valor) â†’ soma ao saldo e adiciona ao histÃ³rico.

// sacar(valor) â†’ subtrai do saldo se houver saldo suficiente.

// exibirExtrato() â†’ mostra todas as operaÃ§Ãµes com tipo e valor.

// ğŸ§  Desafio: registre cada operaÃ§Ã£o como um objeto:

// { tipo: "depÃ³sito", valor: 100, data: "2025-10-07" }

// ğŸ”¹ 4. Sistema de pedidos de restaurante

// Crie um objeto restaurante que contenha:

// cardapio (array de objetos { nome, preco })

// pedidos (array de pedidos feitos)
// E mÃ©todos:

// fazerPedido(nomePrato, quantidade) â†’ adiciona ao array de pedidos.

// calcularTotal() â†’ soma o valor total do pedido.

// mostrarPedidos() â†’ lista todos os pratos e quantidades.

// ğŸ§  Desafio extra: evite pedidos duplicados (se jÃ¡ existir, apenas aumente a quantidade).

// ğŸ”¹ 5. Sistema de login e autenticaÃ§Ã£o

// Crie um objeto sistema com:

// usuarios: array de objetos { usuario, senha }

// logado: boolean
// E mÃ©todos:

// registrar(usuario, senha) â†’ adiciona novo usuÃ¡rio.

// login(usuario, senha) â†’ verifica credenciais e muda logado para true.

// logout() â†’ muda logado para false.

// ğŸ§  Desafio: nÃ£o permitir dois cadastros com o mesmo nome de usuÃ¡rio.