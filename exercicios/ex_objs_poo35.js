// üöÄ Exerc√≠cios ‚Äî Padr√£o Factory Method (n√≠vel intermedi√°rio ‚Üí avan√ßando)
/*
Exerc√≠cio 5 ‚Äì Sistema de Pagamentos

Crie:
PagamentoCredito (m√©todo processar() ‚Üí ‚ÄúPagamento no cr√©dito aprovado‚Äù)

PagamentoDebito (m√©todo processar() ‚Üí ‚ÄúPagamento no d√©bito aprovado‚Äù)

PagamentoPix (m√©todo processar() ‚Üí ‚ÄúPagamento via Pix aprovado‚Äù)

Crie PagamentoFactory com o m√©todo criarPagamento(tipo) e teste criando pagamentos diferentes.

Desafio extra:
Adicione um m√©todo executarPagamento(valor) que mostra tamb√©m o valor pago.
*/

class PagamentoCredito{

    processar(){
        console.log(`pagamento no cr√©dito aprovado`)
    }
}
class PagamentoDebito{

    processar(){
        console.log(`pagamento no D√©bito aprovado`)
    }
}
class PagamentoPix{

    processar(){
        console.log(`pagamento no Pix aprovado`)
    }
}


class PagamentoFactory{
    static criarPagamento(tipo){
        switch(tipo){
            case "credito": return new PagamentoCredito()
            case "debito": return new PagamentoDebito()
            case "pix": return new PagamentoPix()
            default: throw new Error(`Pagamento ${tipo} indisponivel`)
            
        }
    }
}

const c1 = PagamentoFactory.criarPagamento("credito")
const d1 = PagamentoFactory.criarPagamento("debito")
const p1 = PagamentoFactory.criarPagamento("pix")
c1.processar()
d1.processar()
p1.processar()